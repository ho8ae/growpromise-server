generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  username      String
  password      String?
  userType      UserType
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  passwordResetToken    String?   // 추가: 비밀번호 재설정 토큰
  passwordResetExpires  DateTime? // 추가: 비밀번호 재설정 토큰 만료 시간
  
 // 소셜 로그인 관련 필드 추가
  socialProvider    SocialProvider? // GOOGLE, APPLE, null(일반 로그인)
  socialId          String?         // 소셜 플랫폼의 고유 ID
  setupCompleted    Boolean @default(false) // 초기 설정 완료 여부
  
 // 프로필 관련 추가 필드
  phoneNumber       String?         // 전화번호 (선택)
  bio               String?         // 자기소개 (선택)
  isActive          Boolean @default(true) // 계정 활성화 상태
  deletedAt         DateTime?       // 소프트 삭제를 위한 필드


  // 관계
  parentProfile ParentProfile?
  childProfile  ChildProfile?
  notifications Notification[]
  userCoin UserCoin?
  galleryFavorites GalleryFavorite[]

   // 소셜 로그인 시 socialProvider + socialId 조합이 유니크해야 함
  @@unique([socialProvider, socialId])
}

// 소셜 로그인 제공자 enum 추가
enum SocialProvider {
  GOOGLE
  APPLE
}

enum UserType {
  PARENT
  CHILD
}

model ParentProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  connectionCode       String?                // 6자리 랜덤 숫자 연결 코드
  connectionCodeExpires DateTime?             // 연결 코드 만료 시간

  // 관계
  children  ChildParentConnection[]
  promises  PromiseTask[]  
  rewards   Reward[]
  rewardHistories RewardHistory[]
  
}

model ChildProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  birthDate DateTime?
  characterStage Int  @default(1)
  currentPlantId  String?  // 현재 키우고 있는 식물 ID
  totalCompletedPlants Int @default(0)
  wateringStreak  Int     @default(0)  // 연속 물주기 일수
  
  
  // 관계
  parents   ChildParentConnection[]
  promises  PromiseAssignment[]
  stickers  Sticker[]
  plants    Plant[]
  rewards   RewardHistory[]
  plantInventory PlantInventory[]
  plantDrawHistory PlantDrawHistory[]
}

model ChildParentConnection {
  id        String   @id @default(uuid())
  childId   String
  parentId  String
  createdAt DateTime @default(now())
  
  child     ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  parent    ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  @@unique([childId, parentId])
}

model PromiseTask { 
  id          String   @id @default(uuid())
  title       String
  description String?
  repeatType  RepeatType @default(ONCE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  // 관계
  parent      ParentProfile @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  assignments PromiseAssignment[]
}

enum RepeatType {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
}

model PromiseAssignment {
  id          String   @id @default(uuid())
  promiseId   String
  childId     String
  dueDate     DateTime
  status      PromiseStatus @default(PENDING)
  verificationImage String?
  verificationTime  DateTime?
  verificationDescription String? // 추가: 인증 설명 필드
  completedAt DateTime?
  rejectionReason String?
  
  // 관계
  promise     PromiseTask  @relation(fields: [promiseId], references: [id], onDelete: Cascade) 
  child       ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  hiddenInGallery Boolean @default(false) // 갤러리에서 숨김 여부
  favorites       GalleryFavorite[]
}

enum PromiseStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  EXPIRED
}

model Sticker {
  id          String   @id @default(uuid())
  childId     String
  rewardId    String?
  title       String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  
  // 관계
  child       ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  reward      Reward?    @relation(fields: [rewardId], references: [id])
}

model Reward {
  id          String   @id @default(uuid())
  parentId    String
  title       String
  description String?
  requiredStickers Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  parent      ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)
  stickers    Sticker[]
  rewardHistories RewardHistory[]
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  title       String
  content     String
  isRead      Boolean  @default(false)
  notificationType NotificationType
  relatedId   String?   // 관련 PromiseTask, Reward 등의 ID
  createdAt   DateTime @default(now())
  
  // 관계
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  PROMISE_CREATED
  PROMISE_VERIFIED
  PROMISE_APPROVED
  PROMISE_REJECTED
  REWARD_EARNED
  SYSTEM
}

// 씨앗 및 식물 종류
model PlantType {
  id               String    @id @default(uuid())
  name             String
  description      String?
  growthStages     Int       // 성장 단계 수
  difficulty       String    // EASY, MEDIUM, HARD
  category         String    // FLOWER, TREE, VEGETABLE, etc.
  unlockRequirement Int?     // 필요한 완료 식물 수
  imagePrefix      String    // 이미지 경로 접두사 (S3 URL 구성에 사용)
  rarity           String    @default("COMMON")  // COMMON, UNCOMMON, RARE, EPIC, LEGENDARY
  isBasic          Boolean   @default(false)
  createdAt        DateTime  @default(now())
  
  // 관계
  plants           Plant[]
  inventory        PlantInventory[]
  drawHistory      PlantDrawHistory[]
}

// 유저 코인 모델
model UserCoin {
  id        String   @id @default(uuid())
  userId    String   @unique
  amount    Int      @default(0)
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 소유한 식물 유형 (인벤토리)
model PlantInventory {
  id          String   @id @default(uuid())
  childId     String
  plantTypeId String
  quantity    Int      @default(1)
  acquiredAt  DateTime @default(now())
  
  child       ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  plantType   PlantType    @relation(fields: [plantTypeId], references: [id], onDelete: Cascade)
  
  @@unique([childId, plantTypeId])
}

// 식물 뽑기 히스토리
model PlantDrawHistory {
  id              String   @id @default(uuid())
  childId         String
  plantTypeId     String
  packType        String   // BASIC, PREMIUM, SPECIAL
  isDuplicate     Boolean  @default(false)
  experienceGained Int?    // 중복일 경우 지급된 경험치
  timestamp       DateTime @default(now())
  
  child           ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  plantType       PlantType    @relation(fields: [plantTypeId], references: [id], onDelete: Cascade)
}


// 사용자가 키우는 식물
model Plant {
  id              String    @id @default(uuid())
  childId         String
  plantTypeId     String
  name            String?   // 사용자 지정 이름
  currentStage    Int       @default(1)
  health          Int       @default(100)  // 0-100
  lastWatered     DateTime  @default(now())
  isCompleted     Boolean   @default(false)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  experience      Int @default(0)    // 현재 경험치
  experienceToGrow Int @default(100)         // 다음 단계로 성장하는데 필요한 경험치
  canGrow          Boolean @default(false) // 성장 가능 여부
  
  // 관계
  child           ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  plantType       PlantType @relation(fields: [plantTypeId], references: [id])
  wateringLogs    WateringLog[]
}

// 물주기 로그
model WateringLog {
  id          String   @id @default(uuid())
  plantId     String
  timestamp   DateTime @default(now())
  healthGain  Int
  
  // 관계
  plant       Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
}

// 스티커 템플릿 모델
model StickerTemplate {
  id           String   @id @default(uuid())
  name         String   // 템플릿 이름 (예: "금색 별", "웃는 얼굴")
  description  String?  // 템플릿 설명
  category     String   // 카테고리 (예: "별", "표정", "동물", "식물" 등)
  imageUrl     String   // 스티커 이미지 URL (S3에 미리 업로드된 이미지)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RewardHistory {
  id          String   @id @default(uuid())
  childId     String
  parentId    String
  rewardId    String
  stickerCount Int
  achievedAt  DateTime @default(now())
  
  // 관계
  child       ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  parent      ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)
  reward      Reward     @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

model GalleryFavorite {
  id                 String           @id @default(uuid())
  userId             String           // 즐겨찾기한 사용자 ID
  promiseAssignmentId String          // 즐겨찾기한 약속 할당 ID
  createdAt          DateTime         @default(now())
  
  // 관계
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  promiseAssignment PromiseAssignment @relation(fields: [promiseAssignmentId], references: [id], onDelete: Cascade)
  
  // 인덱스
  @@index([userId])
  @@index([promiseAssignmentId])
  @@unique([userId, promiseAssignmentId]) // 한 사용자가 동일한 이미지를 중복 즐겨찾기 방지
}
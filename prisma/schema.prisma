generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  username      String
  password      String
  userType      UserType
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  passwordResetToken    String?   // 추가: 비밀번호 재설정 토큰
  passwordResetExpires  DateTime? // 추가: 비밀번호 재설정 토큰 만료 시간
  

  // 관계
  parentProfile ParentProfile?
  childProfile  ChildProfile?
  notifications Notification[]
}

enum UserType {
  PARENT
  CHILD
}

model ParentProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  connectionCode       String?                // 6자리 랜덤 숫자 연결 코드
  connectionCodeExpires DateTime?             // 연결 코드 만료 시간

  // 관계
  children  ChildParentConnection[]
  promises  PromiseTask[]  
  rewards   Reward[]
}

model ChildProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  birthDate DateTime?
  characterStage Int  @default(1)
  currentPlantId  String?  // 현재 키우고 있는 식물 ID
  totalCompletedPlants Int @default(0)
  wateringStreak  Int     @default(0)  // 연속 물주기 일수
  
  
  // 관계
  parents   ChildParentConnection[]
  promises  PromiseAssignment[]
  stickers  Sticker[]
  plants    Plant[]
}

model ChildParentConnection {
  id        String   @id @default(uuid())
  childId   String
  parentId  String
  createdAt DateTime @default(now())
  
  child     ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  parent    ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  @@unique([childId, parentId])
}

model PromiseTask { 
  id          String   @id @default(uuid())
  title       String
  description String?
  repeatType  RepeatType @default(ONCE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  // 관계
  parent      ParentProfile @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  assignments PromiseAssignment[]
}

enum RepeatType {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
}

model PromiseAssignment {
  id          String   @id @default(uuid())
  promiseId   String
  childId     String
  dueDate     DateTime
  status      PromiseStatus @default(PENDING)
  verificationImage String?
  verificationTime  DateTime?
  completedAt DateTime?
  rejectionReason String?
  
  // 관계
  promise     PromiseTask  @relation(fields: [promiseId], references: [id], onDelete: Cascade) 
  child       ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
}

enum PromiseStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  EXPIRED
}

model Sticker {
  id          String   @id @default(uuid())
  childId     String
  rewardId    String?
  title       String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  
  // 관계
  child       ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  reward      Reward?    @relation(fields: [rewardId], references: [id])
}

model Reward {
  id          String   @id @default(uuid())
  parentId    String
  title       String
  description String?
  requiredStickers Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  parent      ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)
  stickers    Sticker[]
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  title       String
  content     String
  isRead      Boolean  @default(false)
  notificationType NotificationType
  relatedId   String?   // 관련 PromiseTask, Reward 등의 ID
  createdAt   DateTime @default(now())
  
  // 관계
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  PROMISE_CREATED
  PROMISE_VERIFIED
  PROMISE_APPROVED
  PROMISE_REJECTED
  REWARD_EARNED
  SYSTEM
}

// 씨앗 및 식물 종류
model PlantType {
  id               String    @id @default(uuid())
  name             String
  description      String?
  growthStages     Int       // 성장 단계 수
  difficulty       String    // EASY, MEDIUM, HARD
  category         String    // FLOWER, TREE, VEGETABLE, etc.
  unlockRequirement Int?     // 필요한 완료 식물 수
  imagePrefix      String    // 이미지 경로 접두사
  createdAt        DateTime  @default(now())
  
  // 관계
  plants           Plant[]
}

// 사용자가 키우는 식물
model Plant {
  id              String    @id @default(uuid())
  childId         String
  plantTypeId     String
  name            String?   // 사용자 지정 이름
  currentStage    Int       @default(1)
  health          Int       @default(100)  // 0-100
  lastWatered     DateTime  @default(now())
  isCompleted     Boolean   @default(false)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  
  // 관계
  child           ChildProfile @relation(fields: [childId], references: [id], onDelete: Cascade)
  plantType       PlantType @relation(fields: [plantTypeId], references: [id])
  wateringLogs    WateringLog[]
}

// 물주기 로그
model WateringLog {
  id          String   @id @default(uuid())
  plantId     String
  timestamp   DateTime @default(now())
  healthGain  Int
  
  // 관계
  plant       Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
}

// 스티커 템플릿 모델
model StickerTemplate {
  id           String   @id @default(uuid())
  name         String   // 템플릿 이름 (예: "금색 별", "웃는 얼굴")
  description  String?  // 템플릿 설명
  category     String   // 카테고리 (예: "별", "표정", "동물", "식물" 등)
  imageUrl     String   // 스티커 이미지 URL (S3에 미리 업로드된 이미지)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}